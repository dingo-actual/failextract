---
name: PyPI Release

on:
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Validate version consistency
        run: |
          # Extract version from git tag (remove 'v' prefix if present)
          GIT_TAG=${GITHUB_REF#refs/tags/}
          GIT_VERSION=${GIT_TAG#v}

          # Extract version from pyproject.toml
          PYPROJECT_VERSION=$(python -c \
            "import tomllib; \
             print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

          echo "Git tag version: $GIT_VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"

          if [ "$GIT_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch: git tag ($GIT_VERSION) != pyproject.toml ($PYPROJECT_VERSION)"
            exit 1
          fi

          echo "Version validation passed: $GIT_VERSION"

      - name: Build package
        run: |
          python -m build

      - name: Validate package
        run: |
          # Check that the package can be built and contains expected files
          python -m twine check dist/*

          # List built artifacts
          echo "Built artifacts:"
          ls -la dist/

          # Verify wheel can be installed and imported
          pip install dist/*.whl
          python -c \
            "import failextract; \
             print(f'FailExtract version: {failextract.__version__}')"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*